// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/silk/cni/config"
)

type Common struct {
	BasicSetupStub        func(string, config.DualAddress, config.DualAddress) error
	basicSetupMutex       sync.RWMutex
	basicSetupArgsForCall []struct {
		arg1 string
		arg2 config.DualAddress
		arg3 config.DualAddress
	}
	basicSetupReturns struct {
		result1 error
	}
	basicSetupReturnsOnCall map[int]struct {
		result1 error
	}
	BasicSetupIPv6Stub        func(string, config.DualAddress, config.DualAddress) error
	basicSetupIPv6Mutex       sync.RWMutex
	basicSetupIPv6ArgsForCall []struct {
		arg1 string
		arg2 config.DualAddress
		arg3 config.DualAddress
	}
	basicSetupIPv6Returns struct {
		result1 error
	}
	basicSetupIPv6ReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Common) BasicSetup(arg1 string, arg2 config.DualAddress, arg3 config.DualAddress) error {
	fake.basicSetupMutex.Lock()
	ret, specificReturn := fake.basicSetupReturnsOnCall[len(fake.basicSetupArgsForCall)]
	fake.basicSetupArgsForCall = append(fake.basicSetupArgsForCall, struct {
		arg1 string
		arg2 config.DualAddress
		arg3 config.DualAddress
	}{arg1, arg2, arg3})
	stub := fake.BasicSetupStub
	fakeReturns := fake.basicSetupReturns
	fake.recordInvocation("BasicSetup", []interface{}{arg1, arg2, arg3})
	fake.basicSetupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Common) BasicSetupCallCount() int {
	fake.basicSetupMutex.RLock()
	defer fake.basicSetupMutex.RUnlock()
	return len(fake.basicSetupArgsForCall)
}

func (fake *Common) BasicSetupCalls(stub func(string, config.DualAddress, config.DualAddress) error) {
	fake.basicSetupMutex.Lock()
	defer fake.basicSetupMutex.Unlock()
	fake.BasicSetupStub = stub
}

func (fake *Common) BasicSetupArgsForCall(i int) (string, config.DualAddress, config.DualAddress) {
	fake.basicSetupMutex.RLock()
	defer fake.basicSetupMutex.RUnlock()
	argsForCall := fake.basicSetupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Common) BasicSetupReturns(result1 error) {
	fake.basicSetupMutex.Lock()
	defer fake.basicSetupMutex.Unlock()
	fake.BasicSetupStub = nil
	fake.basicSetupReturns = struct {
		result1 error
	}{result1}
}

func (fake *Common) BasicSetupReturnsOnCall(i int, result1 error) {
	fake.basicSetupMutex.Lock()
	defer fake.basicSetupMutex.Unlock()
	fake.BasicSetupStub = nil
	if fake.basicSetupReturnsOnCall == nil {
		fake.basicSetupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.basicSetupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Common) BasicSetupIPv6(arg1 string, arg2 config.DualAddress, arg3 config.DualAddress) error {
	fake.basicSetupIPv6Mutex.Lock()
	ret, specificReturn := fake.basicSetupIPv6ReturnsOnCall[len(fake.basicSetupIPv6ArgsForCall)]
	fake.basicSetupIPv6ArgsForCall = append(fake.basicSetupIPv6ArgsForCall, struct {
		arg1 string
		arg2 config.DualAddress
		arg3 config.DualAddress
	}{arg1, arg2, arg3})
	stub := fake.BasicSetupIPv6Stub
	fakeReturns := fake.basicSetupIPv6Returns
	fake.recordInvocation("BasicSetupIPv6", []interface{}{arg1, arg2, arg3})
	fake.basicSetupIPv6Mutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Common) BasicSetupIPv6CallCount() int {
	fake.basicSetupIPv6Mutex.RLock()
	defer fake.basicSetupIPv6Mutex.RUnlock()
	return len(fake.basicSetupIPv6ArgsForCall)
}

func (fake *Common) BasicSetupIPv6Calls(stub func(string, config.DualAddress, config.DualAddress) error) {
	fake.basicSetupIPv6Mutex.Lock()
	defer fake.basicSetupIPv6Mutex.Unlock()
	fake.BasicSetupIPv6Stub = stub
}

func (fake *Common) BasicSetupIPv6ArgsForCall(i int) (string, config.DualAddress, config.DualAddress) {
	fake.basicSetupIPv6Mutex.RLock()
	defer fake.basicSetupIPv6Mutex.RUnlock()
	argsForCall := fake.basicSetupIPv6ArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Common) BasicSetupIPv6Returns(result1 error) {
	fake.basicSetupIPv6Mutex.Lock()
	defer fake.basicSetupIPv6Mutex.Unlock()
	fake.BasicSetupIPv6Stub = nil
	fake.basicSetupIPv6Returns = struct {
		result1 error
	}{result1}
}

func (fake *Common) BasicSetupIPv6ReturnsOnCall(i int, result1 error) {
	fake.basicSetupIPv6Mutex.Lock()
	defer fake.basicSetupIPv6Mutex.Unlock()
	fake.BasicSetupIPv6Stub = nil
	if fake.basicSetupIPv6ReturnsOnCall == nil {
		fake.basicSetupIPv6ReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.basicSetupIPv6ReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Common) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.basicSetupMutex.RLock()
	defer fake.basicSetupMutex.RUnlock()
	fake.basicSetupIPv6Mutex.RLock()
	defer fake.basicSetupIPv6Mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Common) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
